/**************************************************************************/
/*!
    @file     sinewave.pde
    @author   Adafruit Industries
    @license  BSD (see license.txt)

    This example will generate a sine wave with the MCP4725 DAC.

    This is an example sketch for the Adafruit MCP4725 breakout board
    ----> http://www.adafruit.com/products/935

    Adafruit invests time and resources providing this open source code,
    please support Adafruit and open-source hardware by purchasing
    products from Adafruit!
*/
/**************************************************************************/
#include <Wire.h>
#include <Adafruit_MCP4725.h>
#include <SoftwareSerial.h>

Adafruit_MCP4725 dac;
Adafruit_MCP4725 dac2;
SoftwareSerial KarsonSerial(11, 10); //RX|TX
// Set this value to 9, 8, 7, 6 or 5 to adjust the resolution
#define DAC_RESOLUTION    (9)

/* Note: If flash space is tight a quarter sine wave is enough
   to generate full sine and cos waves, but some additional
   calculation will be required at each step after the first
   quarter wave.                                              */

const PROGMEM uint16_t DACLookup_FullSine_9Bit[512] =
{
748,740,729,783,743,737,791,787,729,719,748,775,724,739,605,783,772,760,757,728,746,748,722,729,711,761,793,760,737,733,761,760,730,708,769,695,765,778,752,720,735,760,764,728,734,772,587,793,750,736,736,750,731,736,743,747,741,669,776,757,750,753,731,721,754,745,726,714,748,724,735,785,763,690,751,763,749,721,731,746,750,722,772,731,728,743,736,732,741,749,719,726,572,761,762,764,712,686,701,722,750,765,671,793,795,751,729,706,744,725,700,702,622,749,747,734,749,734,748,753,720,719,624,772,760,739,739,736,728,743,714,728,702,760,776,767,721,712,729,754,717,731,748,784,763,770,731,732,721,749,732,719,731,751,749,765,749,717,739,722,738,716,726,763,702,750,758,736,730,744,723,721,740,737,736,695,772,763,720,765,728,714,730,762,726,724,636,785,748,708,732,728,734,741,720,719,740,780,753,708,718,714,729,744,749,758,777,744,729,716,740,717,748,695,775,726,722,749,743,702,733,741,747,651,775,745,712,742,731,733,741,742,718,727,737,722,761,766,724,709,734,774,736,719,729,748,747,565,774,762,721,745,733,734,739,749,733,750,737,631,762,793,740,721,726,775,744,723,724,562,781,773,720,731,740,755,721,752,749,757,764,787,738,728,736,778,731,739,684

};
//const PROGMEM uint16_t DACLookup_FullSine_9Bit[512] =
//{
//676,694,678,657,671,583,721,703,670,721,697,679,676,688,660,679,544,746,710,675,704,703,686,684,677,678,677,690,719,735,681,697,701,691,681,680,675,697,686,708,735,690,691,692,695,686,673,684,491,733,721,653,701,682,704,672,678,664,667,635,742,729,687,701,692,701,685,676,670,684,621,728,727,679,695,689,700,688,683,675,678,685,699,727,727,687,694,689,684,694,679,677,685,687,681,680,733,708,685,697,689,706,687,675,680,676,679,633,732,713,683,701,692,702,683,682,677,696,688,700,728,705,683,690,683,697,687,682,666,692,676,719,732,687,700,704,688,686,707,676,657,688,467,738,702,676,703,697,682,672,691,667,674,687,706,725,692,704,700,696,685,692,673,685,684,697,726,690,685,701,681,678,680,689,662,678,672,722,721,685,703,709,678,685,685,672,660,690,467,740,715,672,721,693,686,689,680,670,657,685,450,726,716,683,701,692,688,701,678,670,677,688,687,729,695,695,692,690,687,701,667,684,501,732,705,662,702,703,686,690,685,659,679,451,748,718,666,705,700,678,683,673,680,674,685,649,732,731,676,692,700,690,690,689,689,688,687,691,710,727,685,686,699,671,660,667,696,663,671,689,710,741,716,694,714,691,690,688,676,677,695,735,739,685,689,698,680,675,692,684,680,578,741,731,663,688,676,715,712,653,668,701,522,733,726,670,702,683,675,671,669,488,732,739,687,686,686,690,668,682,619,731,700,673,713,682,684,670,696,692,708,732,700,693,695,692,693,678,672,675,678,684,463,732,725,665,703,692,711,676,681,667,688,700,713,649,725,686,693,728,690,678,671,678,656,652,672,584,742,710,678,715,690,674,679,659,702,504,737,720,674,699,691,679,661,680,698,738,724,671,669,699,715,723,685,681,469,762,764,675,659,636,631,683,691,607,742,741,670,689,672,680,649,695,731,511,743,722,692,699,689,694,665,678,653,707,702,689,717,677,668,657,691,448,742,738,695,696,696,706,655,682,431,750,706,671,710,676,679,665,682,667,739,727,703,690,685,676,685,675,690,677,728,706,690,695,707,681,660,667,706,718,721,685,666,674,691,702,696,681,534,717,723,678,686,692
//
//};

const PROGMEM uint16_t DACLookup_FullSine_8Bit[256] =
{
  2048, 2098, 2148, 2198, 2248, 2298, 2348, 2398,
  2447, 2496, 2545, 2594, 2642, 2690, 2737, 2784,
  2831, 2877, 2923, 2968, 3013, 3057, 3100, 3143,
  3185, 3226, 3267, 3307, 3346, 3385, 3423, 3459,
  3495, 3530, 3565, 3598, 3630, 3662, 3692, 3722,
  3750, 3777, 3804, 3829, 3853, 3876, 3898, 3919,
  3939, 3958, 3975, 3992, 4007, 4021, 4034, 4045,
  4056, 4065, 4073, 4080, 4085, 4089, 4093, 4094,
  4095, 4094, 4093, 4089, 4085, 4080, 4073, 4065,
  4056, 4045, 4034, 4021, 4007, 3992, 3975, 3958,
  3939, 3919, 3898, 3876, 3853, 3829, 3804, 3777,
  3750, 3722, 3692, 3662, 3630, 3598, 3565, 3530,
  3495, 3459, 3423, 3385, 3346, 3307, 3267, 3226,
  3185, 3143, 3100, 3057, 3013, 2968, 2923, 2877,
  2831, 2784, 2737, 2690, 2642, 2594, 2545, 2496,
  2447, 2398, 2348, 2298, 2248, 2198, 2148, 2098,
  2048, 1997, 1947, 1897, 1847, 1797, 1747, 1697,
  1648, 1599, 1550, 1501, 1453, 1405, 1358, 1311,
  1264, 1218, 1172, 1127, 1082, 1038,  995,  952,
   910,  869,  828,  788,  749,  710,  672,  636,
   600,  565,  530,  497,  465,  433,  403,  373,
   345,  318,  291,  266,  242,  219,  197,  176,
   156,  137,  120,  103,   88,   74,   61,   50,
    39,   30,   22,   15,   10,    6,    2,    1,
     0,    1,    2,    6,   10,   15,   22,   30,
    39,   50,   61,   74,   88,  103,  120,  137,
   156,  176,  197,  219,  242,  266,  291,  318,
   345,  373,  403,  433,  465,  497,  530,  565,
   600,  636,  672,  710,  749,  788,  828,  869,
   910,  952,  995, 1038, 1082, 1127, 1172, 1218,
  1264, 1311, 1358, 1405, 1453, 1501, 1550, 1599,
  1648, 1697, 1747, 1797, 1847, 1897, 1947, 1997
};

const PROGMEM uint16_t DACLookup_FullSine_7Bit[128] =
{
  2048, 2148, 2248, 2348, 2447, 2545, 2642, 2737,
  2831, 2923, 3013, 3100, 3185, 3267, 3346, 3423,
  3495, 3565, 3630, 3692, 3750, 3804, 3853, 3898,
  3939, 3975, 4007, 4034, 4056, 4073, 4085, 4093,
  4095, 4093, 4085, 4073, 4056, 4034, 4007, 3975,
  3939, 3898, 3853, 3804, 3750, 3692, 3630, 3565,
  3495, 3423, 3346, 3267, 3185, 3100, 3013, 2923,
  2831, 2737, 2642, 2545, 2447, 2348, 2248, 2148,
  2048, 1947, 1847, 1747, 1648, 1550, 1453, 1358,
  1264, 1172, 1082,  995,  910,  828,  749,  672,
   600,  530,  465,  403,  345,  291,  242,  197,
   156,  120,   88,   61,   39,   22,   10,    2,
     0,    2,   10,   22,   39,   61,   88,  120,
   156,  197,  242,  291,  345,  403,  465,  530,
   600,  672,  749,  828,  910,  995, 1082, 1172,
  1264, 1358, 1453, 1550, 1648, 1747, 1847, 1947
};

const PROGMEM uint16_t DACLookup_FullSine_6Bit[64] =
{
  2048, 2248, 2447, 2642, 2831, 3013, 3185, 3346,
  3495, 3630, 3750, 3853, 3939, 4007, 4056, 4085,
  4095, 4085, 4056, 4007, 3939, 3853, 3750, 3630,
  3495, 3346, 3185, 3013, 2831, 2642, 2447, 2248,
  2048, 1847, 1648, 1453, 1264, 1082,  910,  749,
   600,  465,  345,  242,  156,   88,   39,   10,
     0,   10,   39,   88,  156,  242,  345,  465,
   600,  749,  910, 1082, 1264, 1453, 1648, 1847
};

const PROGMEM uint16_t DACLookup_FullSine_5Bit[32] =
{
  2048, 2447, 2831, 3185, 3495, 3750, 3939, 4056,
  4095, 4056, 3939, 3750, 3495, 3185, 2831, 2447,
  2048, 1648, 1264,  910,  600,  345,  156,   39,
     0,   39,  156,  345,  600,  910, 1264, 1648
};

void setup(void) {
  Serial.begin(9600);
  Serial.println("Hello!");
  KarsonSerial.begin(9600);
  // For Adafruit MCP4725A1 the address is 0x62 (default) or 0x63 (ADDR pin tied to VCC)
  // For MCP4725A0 the address is 0x60 or 0x61
  // For MCP4725A2 the address is 0x64 or 0x65
  dac.begin(0x62);
  //dac2.begin(0x63);

  Serial.println("Generating a sine wave");
}

void loop(void) {
    uint16_t i;

    // Push out the right lookup table, depending on the selected resolution
    #if DAC_RESOLUTION == 5
      for (i = 0; i < 32; i++)
      {
        dac.setVoltage(pgm_read_word(&(DACLookup_FullSine_5Bit[i])), false);
      }
    #elif DAC_RESOLUTION == 6
      for (i = 0; i < 64; i++)
      {
        dac.setVoltage(pgm_read_word(&(DACLookup_FullSine_6Bit[i])), false);
      }
    #elif DAC_RESOLUTION == 7
      for (i = 0; i < 128; i++)
      {
        dac.setVoltage(pgm_read_word(&(DACLookup_FullSine_7Bit[i])), false);
      }
    #elif DAC_RESOLUTION == 9
      for (i = 0; i < 512; i++)
      {
        dac.setVoltage(pgm_read_word(&(DACLookup_FullSine_9Bit[i])), false);
      }
    #else    // Use 8-bit data if nothing else is specified
      for (i = 0; i < 256; i++)
      {
        dac.setVoltage(pgm_read_word(&(DACLookup_FullSine_8Bit[i])), false);
        //dac2.setVoltage(pgm_read_word(&(DACLookup_FullSine_8Bit[i])), false);
//        if(i<128)
//        {
//          dac2.setVoltage(i*4, false);
//        }
//        else
//        {
//        int out = i-1;
//        dac2.setVoltage(out*4, false);
//        }
//        int temp = pgm_read_word(&(DACLookup_FullSine_8Bit[i]));
//        //Serial.
//        temp &= 0xFF;
//        short second = temp>>8 & 0xFF;
//        short first = temp;
//        byte output[4];
//        output[0]=0x01;
//        output[1]= 0x00;
//        output[2]= 0x00;
//        output[4] = 0x01;
//        KarsonSerial.write(output, 4);
//        Serial.println(temp);
      }
    #endif
}
